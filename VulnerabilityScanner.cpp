#include "VulnerabilityScanner.hpp"
#include <filesystem>
#include <iostream>

VulnerabilityScanner::VulnerabilityScanner(Logger& logger, Localization& localization) : logger(logger), localization(localization) {
    checkers.push_back(std::make_unique<XSSChecker>());
    checkers.push_back(std::make_unique<SQLInjectionChecker>());
    checkers.push_back(std::make_unique<CommandInjectionChecker>());
}

void VulnerabilityScanner::scanDirectory(const std::string& directoryPath) {
    for (const auto& entry : std::filesystem::recursive_directory_iterator(directoryPath)) {
        if (entry.is_regular_file()) {
            std::string filePath = entry.path().string();
            std::vector<std::string> lines = readFileWithLines(filePath);

            for (const auto& checker : checkers) {
                checker->check(lines, filePath, logger);
            }
        }
    }
}

std::vector<std::string> VulnerabilityScanner::readFileWithLines(const std::string& filePath) {
    std::ifstream file(filePath);
    std::vector<std::string> lines;
    if (!file.is_open()) {
        std::cerr << localization.getMessage("file_open_error") << filePath << std::endl;
        return lines;
    }

    std::string line;
    while (std::getline(file, line)) {
        lines.push_back(line);
    }
    file.close();
    return lines;
}
