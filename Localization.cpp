#include "Localization.hpp"
#include <locale>

Localization::Localization() {
    setlocale(LC_ALL, "");
    std::string currentLocale = std::setlocale(LC_ALL, NULL);
    currentLanguage = (currentLocale.find("ru") != std::string::npos) ? "ru" : "en";
    loadMessages();
}

std::string Localization::getMessage(const std::string& key) {
    if (messages.find(currentLanguage) != messages.end()) {
        if (messages[currentLanguage].find(key) != messages[currentLanguage].end()) {
            return messages[currentLanguage][key];
        }
    }
    return "Message not found";
}

void Localization::loadMessages() {
    messages["ru"] = {
        {"enter_directory", "Введите путь к директории проекта: "},
        {"scan_complete", "Сканирование завершено. Лог уязвимостей записан в файл vulnerability_log.txt"},
        {"open_log_error", "Не удалось открыть файл для логирования."},
        {"file_open_error", "Не удалось открыть файл: "},
        {"error", "Ошибка"},
        {"log_file", "Файл"},
        {"log_line", "Строка"},
        {"log_vulnerability", "Уязвимость"},
        {"log_type", "Тип"}
    };

    messages["en"] = {
        {"enter_directory", "Enter the project directory path: "},
        {"scan_complete", "Scan complete. Vulnerability log written to vulnerability_log.txt"},
        {"open_log_error", "Failed to open log file."},
        {"file_open_error", "Failed to open file: "},
        {"error", "Error"},
        {"log_file", "File"},
        {"log_line", "Line"},
        {"log_vulnerability", "Vulnerability"},
        {"log_type", "Type"}
    };
}
